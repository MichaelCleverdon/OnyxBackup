(define (tsar list find replace)
;;TODO loop through searchList and if a list element is another list, recursively call tsar on the car and cdr of that list
    (define trueReplace (findRandom replace (random 100)))
    (if (pair? list)
        (if (teq? list find)
            (cons trueReplace (tsar (cdr list) find replace)) ;True
            (if (list? list) ;False
                (cons (tsar (car list) find replace) (tsar (cdr list) find replace))
                (cons (car list) (tsar (cdr list) find replace))
            )
        )
        (if (eq? list find)
            replace
            list
        )
    )
    
)


(define (findRandom list randomVar)
    ; (display randomVar)
    ; (display " ")
    (if (pair? list)
        (if (eq? (car list) 'RANDOM)
            (cons randomVar (findRandom (cdr list) (copy randomVar)))
            (if (list? list)
                (cons (findRandom (car list) randomVar) (findRandom (cdr list) (copy randomVar)))
                (cons (car list) (findRandom (cdr list) (copy randomVar)))
            )
        )
        (if (eq? list 'RANDOM)
            (random 100)
            list
        )    
    )
)
;Do this first before finishing tsar
(define (copy x)
    (if (null? list)
        x
        (if (list? x) 
            (cons (car x) (cdr x))
            x
        )
    )
)

(define (teq? list find)
    (if (list? list)
        (if (eq? (car list) find)
            #t
            #f
        )
        (if (eq? list find)
            #t
            #f
        )
    )
)
;; RANDOM USES TSAR DO IT LATER

(display (tsar 'z 'x 'y))
(display "\n")
; (display "Expected: y\n")
(display (tsar 'x 'x 'y))
(display "\n")
; (display "Expected: (y y z)\n")
(display (tsar '(x y z) 'x 'y))
(display "\n")
; (display "Expected: (RANDOM y z)\n")
(display (tsar '(x y z) 'x 'RANDOM))
(display "\n")
(display (tsar '(x y z) 'x '(RANDOM)))
(display "\n")
(display (tsar '() 'x '(RANDOM)))
(display "\n")
; (display "Expected: (y y z)\n")
(display (tsar '(y y z) 'x 'y))
(display "\n")
(display (tsar '((x x) z) 'x 'y))
(display "\n")
(display (tsar '(x (x x) z) 'x 'y))
(display "\n")
; (display "Expected: (RANDOM RANDOM RANDOM y y z)\n")
(display (tsar '(x x x y y z) 'x 'RANDOM))
(display "\n")
; (display "Expected: (x (x) z)\n")
(display (tsar '(x (x) z) '(x x) 'y))
(display "\n")
; (display "Expected: (x y z)\n")
(display (tsar '(x (x x) z) '(x x) 'y))
(display "\n")
; (display "Expected: (x (y y y) z)\n")
(display (tsar '(x (x x) z) '(x x) '(y y y)))
(display "\n")
; (display "Expected: ((y y y) ((y y y) (y y y)) z)\n")
(display (tsar '(x (x x) z) 'x '(y y y)))
(display "\n")
; (display "Input: (x (x) ((x) x) (y) (y y) z) '(x) '(RANDOM RANDOM))\n")
; (display "Expected: (x (RANDOM RANDOM) ((RANDOM RANDOM) x) (y) (y y) z)\n")
(display (tsar '(x (x) ((x) x) (y) (y y) z) '(x) '(RANDOM RANDOM)))
(display "\n")
; (display "Input: (x (x) ((x) x) (y) (y y) z) '(x) '(RANDOM y))\n")
; (display "Expected: (x (RANDOM y) ((RANDOM y) x) (y) (y y) z)\n")
(display (tsar '(x (x) ((x) x) (y) (y y) z) '(x) '(RANDOM y)))
(display "\n")
; (display "Input: (x (x) ((x) x) (y) (y y) z) '(x) '((RANDOM RANDOM) RANDOM y))\n")
; (display "Expected: (x ((RANDOM RANDOM) RANDOM2 y) (((RANDOM RANDOM) RANDOM2 y) x) (y) (y y) z)\n")
(display (tsar '(x (x) ((x) x) (y) (y y) z) '(x) '((RANDOM RANDOM) RANDOM y)))
(display "\n")
